#include <bcrandom.h>
#include <obliv.oh>

#include "includes/dbg.h"
#include "includes/list_utils.h"

#include "mpfss_naive.h"
#include "mpfss_naive.oh"


void call_dpf_from_matches(pointinfo_t **matches,bool **vectors, int b, int *bucket_lenghts){

	//synchronize	
	if(ocCurrentParty()==1){

		ocBroadcastInt(1, 1);
	}else{
		int ok=3;
		while(!( ok==1)){
			ok= ocBroadcastInt(1, 1);
		}
	}

	obliv uint8_t *values=calloc(b, sizeof(obliv uint8_t));
	for (int i = 0; i < b; ++i)
	{
		int index_non_obliv;  		
		if(ocCurrentParty()==1){
  			index_non_obliv=(size_t)matches[i]->index_in_batch;
  			debug("index_non_obliv %d\n", index_non_obliv);
  			if(index_non_obliv==-1){
  				debug("empty batch!\n");
  			}
  		}

  		obliv int index_in_batch_obliv=feedOblivInt(index_non_obliv,1);

		#ifdef DEBUG
			int in;
			revealOblivInt(&in, index_in_batch_obliv, 0);
			debug("Index from obliv: %d\n",in );
		#endif

		bool *batch_vector;
  		dpf(bucket_lenghts[i],(obliv size_t) index_in_batch_obliv, values, i,&batch_vector);
	  	vectors[i]=batch_vector;

	}



	#ifdef DEBUG
		debug("------------- RESUTLS -------------\n");
	  	for(int i=0; i<b; i++){
	  		
			int batchsize=bucket_lenghts[i];

			obliv bool *v1= calloc(batchsize, sizeof(obliv bool));
			obliv bool *v2= calloc(batchsize, sizeof(obliv bool));
			feedOblivBoolArray(v1, vectors[i], batchsize, 1);
			feedOblivBoolArray(v2, vectors[i], batchsize, 2);;

			obliv bool *dpf_obliv= calloc(batchsize, sizeof(obliv bool));
			for(int i = 0; i <batchsize ; i++) {
				dpf_obliv[i]=v1[i]^v2[i]; 
			}
			free(v1);
			free(v2);

			bool *vdpf2= calloc(batchsize, sizeof(bool));
			revealOblivBoolArray(vdpf2, dpf_obliv, batchsize, 0);
			free(dpf_obliv);

			char *buff=calloc(batchsize*2+100, sizeof(int));
			sprintf(buff, "dpf #%d:               ", i);  
			for(int j = 0; j <batchsize; j++) {
				char r[1+ sizeof(int)];
				sprintf(r, " %d", vdpf2[j]);		
			  	strcat(buff, r );  
			}
			debug("%s\n",buff);
			free(buff);
			free(vdpf2);
	  	}
  	#endif 

	free(values);
}

bool *reveal_vector(uint8_t *vector, int vector_size, int print){

	obliv bool *v1= calloc(vector_size, sizeof(obliv bool));
	obliv bool *v2= calloc(vector_size, sizeof(obliv bool));
	feedOblivBoolArray(v1, vector, vector_size, 1);
	feedOblivBoolArray(v2, vector, vector_size, 2);

	obliv bool *dpf_obliv= calloc(vector_size, sizeof(obliv bool));
	for(int i = 0; i <vector_size ; i++) {
			dpf_obliv[i]=v1[i]^v2[i]; 
	}    
	free(v1);
	free(v2);
	
	bool *reveald_vector= calloc(vector_size, sizeof(bool));
	revealOblivBoolArray(reveald_vector, dpf_obliv, vector_size, 0);
	free(dpf_obliv);

	if(print==1){

		char *buff=calloc(vector_size*2+100, sizeof(int));
		sprintf(buff, "Revealed Vector: ");  
		for(int j = 0; j <vector_size; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", reveald_vector[j]);		
		  	strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(buff);

	}
	return reveald_vector;
}