#include <bcrandom.h>
#include <obliv.oh>

#include "includes/dbg.h"
#include "includes/list_utils.h"

#include "mpfss_naive.h"
#include "mpfss_naive.oh"


void call_dpf_from_matches(pointinfo_t **matches, int b, int *bucket_lenghts){

	//synchronize	
	if(ocCurrentParty()==1){

		ocBroadcastInt(1, 1);

	}else{
		int ok=3;
		while(!( ok==1)){
			ok= ocBroadcastInt(1, 1);
		}
	}





	obliv uint8_t *values;

	for (int i = 0; i < b; ++i)
	{
		int index_non_obliv;  		
		if(ocCurrentParty()==1){
  			index_non_obliv=(size_t)matches[i]->index_in_batch;
  			debug("index_non_obliv %d\n", index_non_obliv);
  			if(index_non_obliv==-1){
  				debug("empty batch!\n");
  			}
  		}

  		obliv int index_in_batch_obliv=feedOblivInt(index_non_obliv,1);

		#ifdef DEBUG
			int in;
			revealOblivInt(&in, index_in_batch_obliv, 0);
			debug("Index from obliv: %d\n",in );
		#endif

		bool *batch_vector;
  		dpf(bucket_lenghts[i],(obliv size_t) index_in_batch_obliv, values, i,&batch_vector);
	}
}