#include <bcrandom.h>
#include <stdlib.h>
#include <time.h>

#include <obliv.oh>
#include <obliv_float_ops.h>
#include <osort.oh>
#include <floram_util.h>
#ifdef Original_FSS
	#include <fss.oh>
	#include <fss_cprg.oh>
#else
	#include "fss_altered.oh"
	#include "fss_cprg_altered.oh"
#endif

#include <floram_util.h>
#include <inttypes.h>

#include "dbg.h"
#include "mpfss_naive.h"
#include "mpfss_naive.oh"
#include "parallel_dpf_naive.h"





/*  Creates management structure for MPFSS_naive. Tested.
	Input 
	t: Number of points in mpfss
	size: Size of the field the points can be taken from 

*/
mpfss * new_mpfss_naive( int t, size_t size){
  mpfss * mpfss = malloc(sizeof(mpfss));
  mpfss->t = t;
  mpfss->size = size;
  return mpfss;

}


/*	Input:
	Similar to dpf but takes a value for beta: f(index)=beta (0 everywhere else).
	Beta ist an array of  uint8_t values (length: memblocksize)
		e.g.:  uint8_t this_beta[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50};
		Neither local_bit_output nor local_output need to be initialized beforehand.
	Output:
	This function will write a bit representation of the dpf into local_bit_output.
	The dpf with values (each element has length of memblocksize) is stored in local_output.
	Works for blockmultiple==1

*/

void dpf_with_beta( size_t size, 
	size_t index_non_obliv,
	obliv uint8_t *beta, 
	int j,  
	bool **local_bit_output_ret, 
	uint8_t **local_output_ret,
	bool cprg_set){

	debug("-----------DPF Run: %d -----------\n",j );
	OcCopy memblockcpy=ocCopyCharN(memblocksize);

	
	obliv size_t index=feedOblivInt( index_non_obliv, 1);

	obliv int correction_bit;
	if(index_non_obliv==-1){
		correction_bit=feedOblivInt( 1,1);
	}else{
		correction_bit=feedOblivInt( 0,1);
	}

	#ifdef DEBUG
		if(ocCurrentParty()==1){
			debug(" call to dpf with size %zu, index %d\n", size, index_non_obliv);
		}
		
		debug("beta");
		for (int ii = 0; ii < memblocksize; ++ii){
			int part;
			revealOblivInt(&part,beta[ii],0);
			printf("%d ",part );
		}
		printf("\n");
		
	#endif 
		
	void *my_fss;
	if(cprg_set){
		my_fss= (fss_cprg *)fss_cprg_new(size, block_no);
	}else{
		my_fss= (fss *)fss_new(size, block_no,1);
	}

	uint8_t *local_output=(uint8_t *)calloc(size, memblocksize*sizeof(uint8_t));
	bool *local_bit_output=(bool *) calloc(size, sizeof(bool));


	obliv uint8_t *active_block_delta = calloc(1, memblocksize * sizeof(obliv uint8_t));

  	if(cprg_set){
		fss_cprg_getblockvector( 	active_block_delta, 
									local_output, 
									local_bit_output, 
									my_fss, 
									index);
	}else{
		fss_getblockvector( 		active_block_delta, 
									local_output, 
									local_bit_output, 
									my_fss, 
									index);
	}



	//----Correction-----------------------

	obliv uint8_t *temp=calloc(1, memblockcpy.eltsize);
	uint8_t *temp_local=malloc(memblocksize);
	
	for (int i = 0; i < memblocksize; ++i){
		temp[i]= active_block_delta[i] ^ beta[i];
	}

	for (size_t ii = 0; ii < memblocksize/sizeof(uint64_t); ii++){
		revealOblivLLong(&((uint64_t *)temp_local)[ii], ((obliv uint64_t *)temp)[ii], 2);
		revealOblivLLong(&((uint64_t *)temp_local)[ii], ((obliv uint64_t *)temp)[ii], 1);
	}

	for (size_t ii = 0; ii< size; ii++) {
		for (size_t jj = 0; jj < memblocksize; jj++) {
			local_output[ii * memblocksize + jj]^=(local_bit_output[ii] * temp_local[jj]);
		}
	}

	free(temp);
	free(temp_local);


	//----Correction for undefinded behaviour of fss for index==-1

	obliv bool *local_bit_output_obliv1=calloc(size, sizeof(obliv uint8_t));
	feedOblivBoolArray((obliv uint64_t *)local_bit_output_obliv1, (uint64_t *) local_bit_output,  size, 1);
	obliv bool *local_bit_output_obliv2=calloc(size, sizeof(obliv uint8_t));
	feedOblivBoolArray((obliv uint64_t *)local_bit_output_obliv2, (uint64_t *) local_bit_output,  size, 2);
	
	obliv int sum=0;
	obliv int index_correction=-1;
	for(int i = 0; i <size ; i++) {
		obliv bool temp=local_bit_output_obliv1[i]^local_bit_output_obliv2[i]; 
		sum=sum+(obliv int) temp;
		obliv if(temp==1){
			index_correction=i;
		}
	}
	
	int sum_no;
	revealOblivInt(&sum_no, sum,1);
	int ic_no;
	revealOblivInt(&ic_no, index_correction,1);
	if(index_non_obliv==-1 && sum_no>0){
		local_bit_output[ic_no]=!local_bit_output[ic_no];
		log_err("Undefined behavior in fss. Correction of local_bit_output was needed.\n");
	}	

	free(local_bit_output_obliv1);
	free(local_bit_output_obliv2);

	//----Return Values-------------------
	

	*local_output_ret=local_output;
	*local_bit_output_ret=local_bit_output;

	//-----Debug--------------------------
	#ifdef DEBUG

		obliv bool *v1= calloc(size, sizeof(obliv bool));
		obliv bool *v2= calloc(size, sizeof(obliv bool));

		feedOblivBoolArray(v1, local_bit_output, size, 1);
		feedOblivBoolArray(v2, local_bit_output, size, 2);

		obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
		/*	Xor both local output vectors to generate an obliv vector*/
		for(int i = 0; i <size ; i++) {
			dpf_obliv[i]=v1[i]^v2[i]; 
		}
		free(v1);
		free(v2);	  
		bool *dpf= calloc(size, sizeof(bool));

		revealOblivBoolArray(dpf, dpf_obliv, size, 0);
		char buff  [(int)size * sizeof(int) + 100];
		sprintf(buff, "\ndpf\n", j);  
		for(int i = 0; i <size ; i++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", dpf[i]);		
		  strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(dpf_obliv);
		free(dpf);

		//------------------------------------------------------------
			//TODO: GIVES Wrong result! 
			/*uint64_t *local_output_1=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
			uint64_t *local_output_2=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
			for (int i = 0; i < size*memblocksize/sizeof(uint64_t); ++i){
				feedOblivLLongArray((obliv uint64_t *)local_output_1, (uint64_t *) local_output,  size* memblocksize/sizeof(uint64_t), 1);
				feedOblivLLongArray((obliv uint64_t *)local_output_2, (uint64_t *) local_output,  size* memblocksize/sizeof(uint64_t), 2);

			}

			obliv uint64_t *dpf_with_beta_obliv=calloc(size, memblocksize*sizeof(obliv uint8_t));
			for (size_t ii = 0; ii< size*memblocksize*sizeof(uint8_t)/sizeof(uint64_t); ii++) {
				uint8_t xor=  local_output_1[ii]^ local_output_2[ii];
				dpf_with_beta_obliv[ii ]=xor;
			}
			uint8_t *dpf_with_beta=calloc(size, memblocksize*sizeof(uint8_t));
			for (int i = 0; i < size*memblocksize/sizeof(uint64_t); ++i){
				revealOblivLLong(&((uint64_t *)dpf_with_beta)[i], dpf_with_beta_obliv[i], 2);
			}
		
			free(local_output_1);
			free(local_output_2);

			char *buff = (char *) calloc((int)size *memblocksize+100, sizeof(int));
			sprintf(buff, "dpf_with_values %d\n", j);  
			for(int i = 0; i <size ; i++) {
				for (int j=0;j<memblocksize; ++j){
					char r[1+ sizeof(int)];
					sprintf(r, " %d", dpf_with_beta[i * memblocksize + j]);		
				  	strcat(buff, r );  
				}	
				char *eof="\n";	
				strcat(buff, eof );
			}
			debug("%s\n",buff);
			free(buff);
			free(dpf_with_beta);*/

			//----------------------------------------------------------------------------------
			/*char *buff = (char *) calloc( memblocksize+100, sizeof(int));
			sprintf(buff, "activ_value \n");  
			for (int i = 0; i < memblocksize; ++i){
				int xx=0;
				revealOblivInt(&xx, active_block_delta[i],0);
				char r[1+ sizeof(int)];
				sprintf(r, " %d", xx);		
				strcat(buff, r );  
			}
			debug("%s\n",buff);
			free(buff);*/
	#endif

	free(active_block_delta);
	if(cprg_set){
		fss_cprg_free(my_fss);
	}else{
	 	fss_free(my_fss);
	}
} 

/*	Input:
	Same as dpf but called with different parameter.
	Beta is random.
	Neither local_bit_output, active_block_delta nor local_output need to be initialized beforehand.

	Output:
	This function will write a bit representation of the dpf into local_bit_output.
	The dpf with values (each element has length of memblocksize) is stored in local_output.
	The magnitude (beta) is written active_block_delta.
	Works for blockmultiple==1
	
*/
void dpf_proper( size_t size,  size_t index_non_obliv, obliv uint8_t **active_block_delta_ret, int j,  bool **local_bit_output_ret, uint8_t **local_output_ret, bool cprg_set){
	debug("-----------DPF Run: %d -----------\n",j );
	debug(" call to dpf with size %zu, index %d\n", size, index_non_obliv);

	obliv size_t index=feedOblivInt( index_non_obliv, 1);

	OcCopy memblockcpy=ocCopyCharN(memblocksize);

	uint8_t *beta_non_obliv=calloc(memblocksize, sizeof(uint8_t));
	if(index_non_obliv==-1){
		for (int i = 0; i < memblocksize; ++i){
			beta_non_obliv[i]=0;
		}
	}else{
		for (int i = 0; i < memblocksize; ++i){
			beta_non_obliv[i]=1;
		}	}
	obliv uint8_t *beta=calloc(1, memblocksize * sizeof(obliv uint8_t));
	feedOblivLLongArray((obliv uint64_t *)beta, (uint64_t *) beta_non_obliv,  memblocksize/sizeof(uint64_t), 1);

	void *my_fss;
	if(cprg_set){
		my_fss= (fss_cprg *)fss_cprg_new(size, block_no);
	}else{
		my_fss= (fss *)fss_new(size, block_no,1);
	}
	
	uint8_t *local_output;
	bool *local_bit_output;
	floram_pma(&local_output, 16, size* memblocksize);
	floram_pma(&local_bit_output, 16, size * sizeof(bool));

  	obliv uint8_t *active_block_delta = calloc(1, memblocksize * sizeof(obliv uint8_t));

  	if(cprg_set){
		fss_cprg_getblockvector( 	active_block_delta, 
									local_output, 
									local_bit_output, 
									my_fss, 
									index);
	}else{
		fss_getblockvector( 		active_block_delta, 
									local_output, 
									local_bit_output, 
									my_fss, 
									index);
	}

	//----Correction-----------------------


	obliv uint8_t *temp=calloc(1, memblockcpy.eltsize);
	uint8_t *temp_local=malloc(memblocksize);
	
	for (int i = 0; i < memblocksize; ++i){
		temp[i]= active_block_delta[i] * beta[i];
	}

	for (size_t ii = 0; ii < memblocksize/sizeof(uint64_t); ii++){
		revealOblivLLong(&((uint64_t *)temp_local)[ii], ((obliv uint64_t *)temp)[ii], 2);
		revealOblivLLong(&((uint64_t *)temp_local)[ii], ((obliv uint64_t *)temp)[ii], 1);
	}

	for (size_t ii = 0; ii< size; ii++) {
		for (size_t jj = 0; jj < memblocksize; jj++) {
			local_output[ii * memblocksize + jj]^=(local_bit_output[ii] * temp_local[jj]);
		}
	}

	free(temp);
	free(temp_local);


	//----Correction for undefinded behaviour of fss for index==-1

	obliv bool *local_bit_output_obliv1=calloc(size, sizeof(obliv uint8_t));
	feedOblivBoolArray((obliv uint64_t *)local_bit_output_obliv1, (uint64_t *) local_bit_output,  size, 1);
	obliv bool *local_bit_output_obliv2=calloc(size, sizeof(obliv uint8_t));
	feedOblivBoolArray((obliv uint64_t *)local_bit_output_obliv2, (uint64_t *) local_bit_output,  size, 2);
	
	obliv int sum=0;
	obliv int index_correction=-1;
	for(int i = 0; i <size ; i++) {
		obliv bool temp=local_bit_output_obliv1[i]^local_bit_output_obliv2[i]; 
		sum=sum+(obliv int) temp;
		obliv if(temp==1){
			index_correction=i;
		}
	}
	
	int sum_no;
	revealOblivInt(&sum_no, sum,1);
	int ic_no;
	revealOblivInt(&ic_no, index_correction,1);
	if(index_non_obliv==-1 && sum_no>0){
		local_bit_output[ic_no]=!local_bit_output[ic_no];
		log_err("Undefined behavior in fss. Correction of local_bit_output was needed.\n");
	}	

	free(local_bit_output_obliv1);
	free(local_bit_output_obliv2);

	//----Return Values-------------------
	

	*local_output_ret=local_output;
	*local_bit_output_ret=local_bit_output;
	*active_block_delta_ret=active_block_delta;


	//-----Debug--------------------------
	  #ifdef DEBUG

		obliv bool *v1= calloc(size, sizeof(obliv bool));
		obliv bool *v2= calloc(size, sizeof(obliv bool));

		/* 	feedObliv<Typename>(typename v, int party)
			Send obliv values to all parties.
			tname can be: bool, char, int, short, long, long long, or float
			==> void  feedOblivBoolArray(obliv bool  dest[],const bool  src[],size_t n, int party);;
		*/
		feedOblivBoolArray(v1, local_bit_output, size, 1);
		feedOblivBoolArray(v2, local_bit_output, size, 2);

		obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
		/*	Xor both local output vectors to generate an obliv vector*/
		for(int i = 0; i <size ; i++) {
			dpf_obliv[i]=v1[i]^v2[i]; 
		}
		free(v1);
		free(v2);	  
		bool *dpf= calloc(size, sizeof(bool));
		
		/*  bool revealObliv<Tname>(tname* dest, obliv tname src, int party)
			  Revealing obliv values to specified parties.
			  Returns true if successful.
			  When party=0: All parties will receive this value.
			  ==>bool  revealOblivBoolArray(bool dest[],  obliv bool src[],  size_t n, int party);
		*/
		revealOblivBoolArray(dpf, dpf_obliv, size, 0);
		char buff [(int)size * sizeof(int) + 100];
		sprintf(buff, "dpf                    ", j);  
		for(int i = 0; i <size ; i++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", dpf[i]);		
		  strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(dpf_obliv);
		free(dpf);
		//------------------------------------------------------------

		/*uint8_t *local_output_1=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
		uint8_t *local_output_2=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
		ocBroadcastLLongArray((uint64_t *)local_output_1, (uint64_t *)local_output, size*memblocksize/sizeof(uint64_t), 1);
		ocBroadcastLLongArray((uint64_t *)local_output_2, (uint64_t *)local_output,size*memblocksize/sizeof(uint64_t),  2);
		uint8_t *dpf_with_beta;
		floram_pma(&dpf_with_beta, 16, size* memblocksize);
		for (size_t ii = 0; ii< size; ii++) {
			for (size_t jj = 0; jj < memblocksize; jj++) {
				uint8_t xor=  local_output_1[ii * memblocksize + jj]^ local_output_2[ii * memblocksize + jj];
				dpf_with_beta[ii * memblocksize + jj]=xor;
			}
		}
		free(local_output_1);
		free(local_output_2);

		char *buff = (char *) calloc((int)size *memblocksize+100, sizeof(int));
		sprintf(buff, "dpf with values \n", j);  
		for(int i = 0; i <size ; i++) {
			for (int j=0;j<memblocksize; ++j){
				char r[1+ sizeof(int)];
				sprintf(r, " %d", dpf_with_beta[i * memblocksize + j]);		
			  	strcat(buff, r );  
			}	
			char *eof="\n";	
			strcat(buff, eof );
		}
		debug("%s\n",buff);
		free(buff);
		free(dpf_with_beta);*/



		//--------------------------------------------------------------
		char *buff = (char *) calloc(memblocksize+100, sizeof(int));
		sprintf(buff, "active_block_delta       ");  
		for (int i = 0; i < memblocksize; ++i){
			uint8_t activ_value=0;
			revealOblivInt(&activ_value, active_block_delta[i], 0);
			char r[1+ sizeof(int)];
			sprintf(r, " %d", activ_value);		
			strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(buff);
		#endif

	if(cprg_set){
		fss_cprg_free(my_fss);
	}else{
	 	fss_free(my_fss);
	}
	free(beta);
	free(beta_non_obliv);
}

/*obliv int8_t cmp_alphas(OcCopy *cpy, void *el1, void *el2) {
	obliv char ret=1;

	obliv if((obliv int) el1 <  (obliv int) el2){
		ret=-1;
	}

	return ret;
}*/


void call_naive_dpf_threaded(void * params_less, int min, int max, void * pd_void){



	void ** params = (void **) params_less;	

	mpfss *mpfss_naive= (mpfss *)params[0];
	int *indices_notobliv_sorted=(int *)params[1];
	int8_t **shareXor=(int8_t **)params[2];
	uint8_t **mpfss_value_output=(uint8_t **)params[3];
	bool *mpfss_bit_output=(bool *)params[4];

	ProtocolDesc *pd=(ProtocolDesc *) pd_void;
	if (pd != NULL) ocSetCurrentProto(pd);

	size_t size =mpfss_naive->size;
	bool cprg_set=mpfss_naive->cprg_set;
	
	for(int j=min; j<max;j++){	
		bool *local_bit_output_ret;
		uint8_t *local_output_ret;
		int index_non_obliv=indices_notobliv_sorted[j];

	  	#ifdef MesDPF
	    	clock_t clock_time = clock();  
	    #endif
		log_info("calling dpf %d\n", j);

		dpf_with_beta( 			size , 
								(size_t) index_non_obliv,
								shareXor[j], 
								j,  
								&local_bit_output_ret, 
		  						&local_output_ret, 
								cprg_set);

		#ifdef MesDPF
			oflush(ocCurrentProto());
			clock_time = clock() - clock_time;
		    double runtime_call_dpf = ((double)clock_time)/CLOCKS_PER_SEC; // in seconds 
		    printf("runtime_dpf: %lf\n", runtime_call_dpf);
	    #endif

		for (int i = 0; i < size; i++){
			mpfss_bit_output[i]=mpfss_bit_output[i]^local_bit_output_ret[i];
			for (int ii = 0; ii < memblocksize ; ii++){
				mpfss_value_output[i][ii]=mpfss_value_output[i][ii]^local_output_ret[i*memblocksize+ii];
			}
		}

		#ifdef DEBUG
			debug("Debug get_mpfss_vector()\n",j );
			
			obliv bool *v1= calloc(size, sizeof(obliv bool));
			obliv bool *v2= calloc(size, sizeof(obliv bool));
			feedOblivBoolArray(v1, local_bit_output_ret, size, 1);
			feedOblivBoolArray(v2, local_bit_output_ret, size, 2);

			obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
			for(int i = 0; i <size ; i++) {
				dpf_obliv[i]=v1[i]^v2[i]; 
			}

			bool *vdpf2= calloc(size, sizeof(bool ));
			revealOblivBoolArray(vdpf2, dpf_obliv, size, 0);

			char *buff= calloc(size, sizeof(int)*sizeof(char)+100);
			sprintf(buff, "mpfss_bit_output round #%d:               ", j);  
			for(int i = 0; i <size ; i++) {
				char r[1+ sizeof(int)];
				sprintf(r, " %d", vdpf2[i]);		
				strcat(buff, r );  
			}
			debug("%s\n",buff);
			free(buff);
			free(vdpf2);

			feedOblivBoolArray(v1, mpfss_bit_output, size, 1);
			feedOblivBoolArray(v2, mpfss_bit_output, size, 2);
			for(int i = 0; i <size ; i++) {
				dpf_obliv[i]=v1[i]^v2[i]; 
			}
			free(v1);
			free(v2);

			char *buff= calloc(size, sizeof(int)*sizeof(char)+100);
			sprintf(buff, "Zwischenergebnis:   		 	 ");  
			bool *vdpf3= calloc(size, sizeof(bool));
			revealOblivBoolArray(vdpf3, dpf_obliv, size, 0);
			for(int j=0; j<size; j++){  
				char r[1+ sizeof(int)];
				sprintf(r, " %d", vdpf3[j]);		
		  		strcat(buff, r );  
			}
			debug("%s\n",buff);
			free(buff);
			free(vdpf3);      
			free(dpf_obliv);

			debug("local_output_ret\n");		
			for (int i = 0; i < size; ++i){
				for (int j = 0; j < memblocksize; ++j){
					obliv int part1=feedOblivInt((int) mpfss_value_output[i][j], 1);
					obliv int part2=feedOblivInt((int) mpfss_value_output[i][j], 2);
					obliv xor=part1^part2;
					int value_no;
					revealOblivInt(&value_no, xor, 0);
					printf("%d ", value_no);
				}
				printf("\n");
			}
		#endif
		  	
		free(local_bit_output_ret);
		free(local_output_ret);
	}
	if (pd != NULL) oflush(pd);
}

int comp (const void * elem1, const void * elem2) 
{
    int f = *((int*)elem1);
    int s = *((int*)elem2);
    if (f > s) return  1;
    if (f < s) return -1;
    return 0;
}

/*  Interface for calling MPFSS. Tested. 
	Creates a obliv multi-point function. 
	Input: 
	  mpfss *mpfss: Struct holing generall input information for the MPFSS
	  obliv size_t *indices: Oblive array holding the indices (x values) for the multipoint function. Length of array: t.
	  obliv bool **vector: Pointer to an array of obliv bool values. Length of array = size in mpfss struct.
	  obliv uint8_t *values: Pointer to an array of obliv unit8_t values. Length of array = size in mpfss struct.
	
	Output:
	  After function termination, vectors will hold a array of vectors which point to obliv bool values. 
	  Each vector represents a non-obliv array with zeros everywhere, except when index equals to x of the dpf. At this position the non-obliv vector will hold a 1.
	  Each vector from vectors represents one x value for a point of our multi-point function.  
	  Values will hold the y values for each point. The y value for the x value stored in the i-th vector is located in values[i].
	  Return type is void.
*/
void get_mpfss_vectors(mpfss *mpfss, int *indices_notobliv, uint8_t **share, uint8_t **mpfss_value_output, bool *mpfss_bit_output, ProtocolDesc ** list_pd_split){
  	int t=mpfss->t;
  	debug("t %d\n", t );
  	obliv size_t index;

    qsort (indices_notobliv, t, sizeof(int), comp);

	/*OcCopy cpy = ocCopyIntN(1);
		obliv int *list=calloc(t,sizeof(obliv int));
		for (int i = 0; i <t; ++i){
			list[i]=indices_notobliv[i];
		}

		osort_batcher(&cpy, (void *) list, (size_t)t, cmp_alphas);

		int * indices_notobliv_sorted=calloc(t, sizeof(int));
		for (int i = 0; i < t; ++i){
			int value=0;
			revealOblivInt(&value, list[i],1);
			indices_notobliv_sorted[i]=value;
			printf("%d \n", value);
	}*/

	obliv uint8_t **share1=calloc(t, sizeof(obliv uint8_t *));
	for (int i = 0; i < t; ++i){	
		obliv uint8_t *share1_part=calloc(memblocksize, sizeof(obliv uint8_t));
		feedOblivLLongArray((obliv uint64_t *)share1_part, (uint64_t *) share[i],  memblocksize/sizeof(uint64_t), 1);
		share1[i]=share1_part;
	}

	obliv uint8_t **share2=calloc(t, sizeof(obliv uint8_t *));
	for (int i = 0; i < t; ++i){	
		obliv uint8_t *share2_part=calloc(memblocksize, sizeof(obliv uint8_t));
		feedOblivLLongArray((obliv uint64_t *)share2_part, (uint64_t *) share[i],  memblocksize/sizeof(uint64_t), 2);
		share2[i]=share2_part;
	}


	obliv uint8_t **shareXor=calloc(t, sizeof(obliv uint8_t*));
	for (int i = 0; i < t; ++i){
		obliv uint8_t *shareXor_temp=calloc(memblocksize,  sizeof(obliv uint8_t));
		shareXor[i]=shareXor_temp;
		for (int j = 0; j < memblocksize; ++j){
			shareXor[i][j]=share1[i][j]^share2[i][j];
		}
	}
	for (int i = 0; i < t; ++i){
		free(share1[i]);
		free(share2[i]);
	}
	free(share1);
	free(share2);


	#ifdef DEBUG
		debug("betas\n");
		for (int i = 0; i < t; ++i){
			for (int j = 0; j < memblocksize; ++j){
				int val;
				revealOblivInt(&val, shareXor[i][j],0);
				printf("%d ", val);
			}
			printf("\n");
		}
	#endif
	oflush(ocCurrentProto());

  	//clock_time = clock(); 
	void **params=calloc(5, sizeof(void *));
	params[0]=(void *)mpfss;
	params[1]=(void *)indices_notobliv;
	params[2]=(void *)shareXor;
	params[3]=(void *)mpfss_value_output;
	params[4]=(void *)mpfss_bit_output;


	int threads=mpfss->threads;
	if(threads>1){
		log_info("calling parallize_naive\n");

		parallize_naive(call_naive_dpf_threaded, (void **) list_pd_split, threads,t, (void *) params);

	}else{
		for (int j = 0; j < t ; ++j){

			size_t size =mpfss->size;
			bool cprg_set=mpfss->cprg_set;
			bool *local_bit_output_ret;
			uint8_t *local_output_ret;
			int index_non_obliv=indices_notobliv[j];

		  	#ifdef MesDPF
		    	clock_t clock_time = clock();  
		    #endif

			dpf_with_beta( 			size , 
									(size_t) index_non_obliv,
									shareXor[j], 
									j,  
									&local_bit_output_ret, 
			  						&local_output_ret, 
									cprg_set);

			#ifdef MesDPF
				oflush(ocCurrentProto());
				clock_time = clock() - clock_time;
			    double runtime_call_dpf = ((double)clock_time)/CLOCKS_PER_SEC; // in seconds 
			    printf("runtime_dpf: %lf\n", runtime_call_dpf);
		    #endif

			for (int i = 0; i < size; i++){
				mpfss_bit_output[i]=mpfss_bit_output[i]^local_bit_output_ret[i];
				for (int ii = 0; ii < memblocksize ; ii++){
					mpfss_value_output[i][ii]=mpfss_value_output[i][ii]^local_output_ret[i*memblocksize+ii];
				}
			}

			#ifdef DEBUG
				debug("Debug get_mpfss_vector()\n",j );
				
				obliv bool *v1= calloc(size, sizeof(obliv bool));
				obliv bool *v2= calloc(size, sizeof(obliv bool));
				feedOblivBoolArray(v1, local_bit_output_ret, size, 1);
				feedOblivBoolArray(v2, local_bit_output_ret, size, 2);

				obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
				for(int i = 0; i <size ; i++) {
					dpf_obliv[i]=v1[i]^v2[i]; 
				}

				bool *vdpf2= calloc(size, sizeof(bool ));
				revealOblivBoolArray(vdpf2, dpf_obliv, size, 0);

				char *buff= calloc(size, sizeof(int)*sizeof(char)+100);
				sprintf(buff, "mpfss_bit_output round #%d:               ", j);  
				for(int i = 0; i <size ; i++) {
					char r[1+ sizeof(int)];
					sprintf(r, " %d", vdpf2[i]);		
					strcat(buff, r );  
				}
				debug("%s\n",buff);
				free(buff);
				free(vdpf2);

				feedOblivBoolArray(v1, mpfss_bit_output, size, 1);
				feedOblivBoolArray(v2, mpfss_bit_output, size, 2);
				for(int i = 0; i <size ; i++) {
					dpf_obliv[i]=v1[i]^v2[i]; 
				}
				free(v1);
				free(v2);

				char *buff= calloc(size, sizeof(int)*sizeof(char)+100);
				sprintf(buff, "Zwischenergebnis:   		 	 ");  
				bool *vdpf3= calloc(size, sizeof(bool));
				revealOblivBoolArray(vdpf3, dpf_obliv, size, 0);
				for(int j=0; j<size; j++){  
					char r[1+ sizeof(int)];
					sprintf(r, " %d", vdpf3[j]);		
			  		strcat(buff, r );  
				}
				debug("%s\n",buff);
				free(buff);
				free(vdpf3);      
				free(dpf_obliv);

				debug("local_output_ret\n");		
				for (int i = 0; i < size; ++i){
					for (int j = 0; j < memblocksize; ++j){
						obliv int part1=feedOblivInt((int) mpfss_value_output[i][j], 1);
						obliv int part2=feedOblivInt((int) mpfss_value_output[i][j], 2);
						obliv xor=part1^part2;
						int value_no;
						revealOblivInt(&value_no, xor, 0);
						printf("%d ", value_no);
					}
					printf("\n");
				}
			#endif
		  	
			free(local_bit_output_ret);
			free(local_output_ret);
		}
	}

	/*
	oflush(ocSetCurrentProto());
	clock_time = clock() - clock_time;
    double runtime_call_dpfs = ((double)clock_time)/CLOCKS_PER_SEC; // in seconds 
    printf("runtime_call_dpfs: %lf\n", runtime_call_dpfs);
	*/

  	for (int i = 0; i < t; ++i){
		free(shareXor[i]);
	}
	free(shareXor);
	oflush(ocCurrentProto());
}





/*  Example for creating a MPFSS Schema. No unit test for this function. 
	Callable from execYaoProtocol().
	Input:
	  void* args -> mpfss *mpfss

	Output
	  No return type.
*/
void mpfss_naive(void* args){
	#ifdef Original_FSS
		debug("Original_FSS\n");
	#else
		debug("FSS FORK\n"); 
	#endif



	mpfss *mpfss = (mpfss*) args;
	int t=mpfss->t;
	int size=mpfss->size;
	int threads=mpfss->threads; 
	ProtocolDesc ** list_pd_split=calloc(t, sizeof(ProtocolDesc *));

	log_info("splitting proto \n");
	int used_threads=threads;
    if(t<used_threads){
        used_threads=t;
    }

	if(threads>1){	    
	    #ifdef Mes
	    	clock_t clock_time = clock();  
	    #endif
		
		for (int i = 0; i < used_threads; ++i){
			ProtocolDesc* pd_split= calloc(1, sizeof(ProtocolDesc));
			ProtocolDesc *pd=ocCurrentProto();
			ocSplitProto(pd_split, ocCurrentProto());
			list_pd_split[i]=pd_split;
		}

		#ifdef Mes
			oflush(ocCurrentProto());
			clock_time = clock() - clock_time;
		    double runtime_splits = ((double)clock_time)/CLOCKS_PER_SEC; // in seconds 
		    printf("splits: %lf\n", runtime_splits);
	    #endif
	}

	uint8_t **beta_share=mpfss->beta_share;
		/*Array of pointers: Length of pointers depend on system*/
	bool * mpfss_bit_output=calloc(size, sizeof(bool));
	uint8_t **mpfss_value_output=calloc(size, sizeof(uint8_t *));
	for (int i = 0; i < size; ++i){
		uint8_t *value=calloc(memblocksize, sizeof(uint8_t));
		mpfss_value_output[i]=value;
	}

	int *indices_notobliv = mpfss->indices_notobliv;

	get_mpfss_vectors(mpfss, indices_notobliv,beta_share, mpfss_value_output, mpfss_bit_output, list_pd_split);
	log_info("dpf_calls finished\n");
	mpfss->mpfss_bit_vector=mpfss_bit_output;
	mpfss->mpfss_value_vector=mpfss_value_output;

	#ifdef DEBUG
		debug("mpfss_bit_output Result\n");
		
		obliv bool *v1= calloc(size, sizeof(obliv bool));
		obliv bool *v2= calloc(size, sizeof(obliv bool));
		feedOblivBoolArray(v1, mpfss_bit_output, size, 1);
		feedOblivBoolArray(v2, mpfss_bit_output, size, 2);

		obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
		for(int i = 0; i <size ; i++) {
			dpf_obliv[i]=v1[i]^v2[i]; 
		}    


		bool *vdpf2= calloc(size, sizeof(bool ));
		revealOblivBoolArray(vdpf2, dpf_obliv, size, 0);
		char *buff= calloc(size, sizeof(int)*sizeof(char)+10);
		for(int j = 0; j <size ; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", vdpf2[j]);		
		  	strcat(buff, r );

		}
		debug("%s\n",buff);
		free(buff);
		free(vdpf2);
		free(v1);
		free(v2);
		free(dpf_obliv);

		debug("mpfss_value_output Result\n");
		
		for (int i = 0; i < size; ++i){

			for (int j = 0; j < memblocksize; ++j){
				obliv int part1=feedOblivInt((int) mpfss_value_output[i][j], 1);
				obliv int part2=feedOblivInt((int) mpfss_value_output[i][j], 2);
				obliv xor=part1^part2;
				int value_no;
				revealOblivInt(&value_no, xor, 0);
				printf("%d ", value_no);
			}
			printf("\n");
		}
		

	#endif
	free(list_pd_split);
 	oflush(ocCurrentProto());
}
