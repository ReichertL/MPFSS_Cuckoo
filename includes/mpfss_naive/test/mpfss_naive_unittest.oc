#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
//#include <gtest/gtest.h>

#include <obliv.h>
#include <obliv.oh>
#include <fss_cprg.oh>
#include "bcrandom.h"


#include "dbg.h"
#include "util.h"

#include "mpfss_naive_unittest.h"
#include "mpfss_naive.h"
#include "mpfss_naive.oh"



bool TEST_get_mpfss_vector(int t, size_t size){
	mpfss *m=new_mpfss_naive(t, size);
	int *indices_notobliv = calloc(t, sizeof(int));
	for(int i=0; i<t; i++){
		indices_notobliv[i]=i;
	}
		//feed indices one by one because target type is not int but size_t
	obliv size_t *indices = calloc(t, BLOCKSIZE*sizeof(obliv size_t)*block_no);
	for(int i=0; i<t; i++){
		obliv size_t k_obliv= feedOblivInt(indices_notobliv[i], 1);
		indices[i]=k_obliv;
	}

	bool *vector=calloc(size, sizeof(bool));
	obliv uint8_t **values  = calloc(1, memblocksize * sizeof(obliv uint8_t*));
	get_mpfss_vector(m, indices, vector, values);

	bool succ=true;
	bool print=false;
	
	//Testing the vector
	obliv bool *v1= calloc(size, sizeof(obliv bool));
	obliv bool *v2= calloc(size, sizeof(obliv bool));
	feedOblivBoolArray(v1, vector, size, 1);
	feedOblivBoolArray(v2, vector, size, 2);

	obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
	for(int i = 0; i <size ; i++) {
		dpf_obliv[i]=v1[i]^v2[i]; 
	}    
	free(v1);
	free(v2);
	bool *vdpf= calloc(size, sizeof(bool));
	revealOblivBoolArray(vdpf, dpf_obliv, size, 0);
	free(dpf_obliv);

	for(int i=0; i<size; i++){
		if(vdpf[i]==1){
			bool found=false;
			for(int j=0; j<t;j++){
				if(indices_notobliv[j]==i){
					found=true;
				}
			}
			if(found==false){
				succ=false;
				print=true;
				printf("TEST_get_mpfss_vector: Resulting MPF is not 1 at index %d, but should be.\n", i);
			}
		}else{
			bool found=false;
			for(int j=0; j<t;j++){
				if(indices_notobliv[j]==i){
					found=true;
				}
			}
			if(found==true){
				succ=false;
				print=true;
				printf("TEST_get_mpfss_vector: Resulting MPF is 1 at index %d, but should not be.\n", i);
			}
		}
		
	}
	free(vdpf);

	// Testing the values
	for(int i=0; i<t; i++){

		uint8_t *activ_value = calloc(1, memblocksize * sizeof(uint8_t));
		revealOblivLLongArray((uint64_t *)activ_value, (uint64_t *)values[i],memblocksize/sizeof(uint64_t),  0);
		bool was_zero=true;
		for (int i = 0; i < memblocksize; ++i){
			if(activ_value[i]!=0){
				was_zero=false;
			}
		}
		if(was_zero){
			print=true;
			printf("TEST_get_mpfss_vector: Warning! Value at one point of MPF was zero, but should be != zero.\n");
		}
	}

	//Print all values and vector if there has been an error
	if(print){

		//Printing expected indices
		char *buff=calloc(t+100, sizeof(int));
		sprintf(buff, "indices (expected)	: ");  
		for(int i = 0; i <t ; i++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", indices_notobliv[i]);		
		  strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(buff);

		//Printing actual indices after revelation
		//Do not use revealOblivIntArray() when obliv type is size_t
		int *indices_revealed = calloc(t, sizeof(int));
		char *buff=calloc(t+100, sizeof(int));
		sprintf(buff, "indices (revealed)	: ");  
		for(int i = 0; i <t ; i++) {
			char r[1+ sizeof(int)];
			int k;
			revealOblivInt(&k, indices[i],0);
			sprintf(r, " %d", k);		
		  strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(buff);
		free(indices_revealed);

		//Printing the x values of the multi point function
		bool *vdpf2= calloc(size, sizeof(bool));
		revealOblivBoolArray(vdpf2, vector, size, 0);
		char *buff=calloc((int)size+100, sizeof(int));
		sprintf(buff, "MPF: ");  
		for(int i = 0; i <size ; i++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", vdpf2[i]);		
		  	strcat(buff, r );  
		}
		debug("%s\n",buff);
		free(buff);
		free(vdpf2); 


		/*//Printing y values of multi point function (only where x!=0)
		for(int i=0; i<t; i++){

			uint8_t *activ_value = calloc(1, memblocksize * sizeof(uint8_t));
			revealOblivLLongArray((uint64_t *)activ_value, (uint64_t *)values[i],memblocksize/sizeof(uint64_t),  0);
			for (int j = 0; j < memblocksize; ++j){
				printf("%d \n", activ_value[j] );
			}	
			printf("\n");
		}*/
	}

	free(m);
	free(indices_notobliv);
	free(indices);
	free(vector);
	free(values);

	return succ;
}

bool TEST_new_mpfss_naive( int t, size_t size){
	mpfss *m=new_mpfss_naive(t, size);
	bool succ=true;

	if(m->t !=t){
		printf("TEST_new_mpfss_naive: t value was %d, but %d expected.\n", m->t, t );
		succ=false;
	}

	if(m->size !=size){
		printf("TEST_new_mpfss_naive: size value was %d, but %d expected.\n", m->size, size );
		succ=false;
	}

	free(m);
	return succ;
}

bool TEST_with_beta_obliv(size_t size, int index){
	bool *local_bit_output;
	uint8_t *local_output;
	obliv size_t index_obliv=feedOblivInt(index, 1);
	obliv uint8_t *beta_obliv;

	uint8_t *this_beta=calloc(memblocksize, sizeof(uint8_t));
	this_beta[0]=50;
	dpf_with_beta_obliv( 		size,
								index_obliv,
								this_beta,
								&beta_obliv,
								0,  
								&local_bit_output,
								&local_output);

	//revealing beta from obliv value
	uint8_t *beta_revealed = calloc(1, memblocksize * sizeof(uint8_t));
	revealOblivLLongArray((uint64_t *)beta_revealed, (uint64_t *)beta_obliv,memblocksize/sizeof(uint64_t),  0);

	//revealing dpf
	obliv bool *v1= calloc(size, sizeof(obliv bool));
	obliv bool *v2= calloc(size, sizeof(obliv bool));
	feedOblivBoolArray(v1, local_bit_output, size, 1);
	feedOblivBoolArray(v2, local_bit_output, size, 2);
	obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
	for(int i = 0; i <size ; i++) {
		dpf_obliv[i]=v1[i]^v2[i]; 
	}
	free(v1);
	free(v2);
	bool *dpf= calloc(size, sizeof(bool ));
	revealOblivBoolArray(dpf, dpf_obliv, size, 0);
	free(dpf_obliv);

	//revealing dpf_with_values
	uint8_t *local_output_1=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	uint8_t *local_output_2=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	ocBroadcastLLongArray((uint64_t *)local_output_1, (uint64_t *)local_output, size*memblocksize/sizeof(uint64_t), 1);
	ocBroadcastLLongArray((uint64_t *)local_output_2, (uint64_t *)local_output,size*memblocksize/sizeof(uint64_t),  2);
	uint8_t *dpf_with_values=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	for (size_t ii = 0; ii< size; ii++) {
		for (size_t jj = 0; jj < memblocksize; jj++) {
			uint8_t xor=  local_output_1[ii * memblocksize + jj]^ local_output_2[ii * memblocksize + jj];
			dpf_with_values[ii * memblocksize + jj]=xor;
		}
	}
	free(local_output_1);
	free(local_output_2);

	bool succ=true;
	bool print=true;


	
	for(int i=0; i<size; i++){
		if(i==index && dpf[i]!=1 ){
			printf("TEST_with_beta_obliv: Resulting Dpf is not 1 at index %d.\n", index);
				print=true;
				succ=false;

		}else if(dpf[i]!=0 && i!=index){
			printf("TEST_with_beta_obliv: Resulting Dpf is not 0 at %d.\n", i);
			print=true;
			succ=false;
			break;
		}
	}

	if(index<size && index>=0){
		for (int i = 0; i <memblocksize ; ++i){
			uint8_t d=dpf_with_values[index * memblocksize + i];
			uint8_t b=this_beta[i];
			uint8_t b_r=beta_revealed[i];
			if(b!=d){
				printf("TEST_with_beta_obliv: the actual difference in block was not the same as beta%d.\n", i);
				print=true;
				succ=false;
			}
			if(b_r!=b){
				printf("TEST_with_beta_obliv: Beta revealed was not the same as beta in block %d.\n", i);
				print=true;
				succ=false;
			}
		}
	}	

	for (int i = 0; i < size; ++i){
		for (int j = 0; j <memblocksize ; ++j){
			uint8_t a=dpf_with_values[i * memblocksize + j];
			if(i!=index && a!=0){
				printf("TEST_dpf_proper: block %d in position %d (not the index) was not zero.\n", j, i);
				print=true;
				succ=false;
			}
		}
	}

	if(print){

		printf("Size: %d Index: %d\n",size, index );
		char *buff=calloc(size+100, sizeof(int));
		sprintf(buff, "TEST_dpf_proper: dpf   		 	 ");  

		for(int j = 0; j <size ; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", dpf[j]);		
		  	strcat(buff, r );  
		}
		printf("%s\n",buff);
		free(buff);


		printf("dpf_with_values\n");
		for(int i = 0; i <size ; i++) {
			for (size_t jj = 0; jj < memblocksize/sizeof(uint8_t); jj++) {
				printf(" %d", dpf_with_values[i * memblocksize/sizeof(uint8_t) + jj]);		
			}
			printf("\n");
		}
			
		printf("beta_revealed\n");
		for (size_t jj = 0; jj < memblocksize; jj++) {
			printf(" %d", beta_revealed[jj]);		
		}
		printf("\n");

	}

	free(dpf);
	free(beta_revealed);
	free(dpf_with_values);
	return succ;

}


bool TEST_dpf_proper(size_t size, int index){
	bool *local_bit_output;
	uint8_t *local_output;
	obliv size_t index_obliv=feedOblivInt(index, 1);
	obliv uint8_t *active_block_delta;
	
	dpf_proper( 		size,
						index_obliv,
						&active_block_delta,
						0,  
						&local_bit_output,
						&local_output);

	//creating active value
	uint8_t *activ_value = calloc(1, memblocksize * sizeof(uint8_t));
	revealOblivLLongArray((uint64_t *)activ_value, (uint64_t *)active_block_delta,memblocksize/sizeof(uint64_t),  0);


	//creating dpf
	obliv bool *v1= calloc(size, sizeof(obliv bool));
	obliv bool *v2= calloc(size, sizeof(obliv bool));
	feedOblivBoolArray(v1, local_bit_output, size, 1);
	feedOblivBoolArray(v2, local_bit_output, size, 2);
	obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
	for(int i = 0; i <size ; i++) {
		dpf_obliv[i]=v1[i]^v2[i]; 
	}
	free(v1);
	free(v2);
	bool *dpf= calloc(size, sizeof(bool ));
	revealOblivBoolArray(dpf, dpf_obliv, size, 0);
	free(dpf_obliv);

	//creating dpf_with_values
	uint8_t *local_output_1=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	uint8_t *local_output_2=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	ocBroadcastLLongArray((uint64_t *)local_output_1, (uint64_t *)local_output, size*memblocksize/sizeof(uint64_t), 1);
	ocBroadcastLLongArray((uint64_t *)local_output_2, (uint64_t *)local_output,size*memblocksize/sizeof(uint64_t),  2);
	uint8_t *dpf_with_values=calloc(1, size* memblocksize*sizeof(obliv uint8_t));
	for (size_t ii = 0; ii< size; ii++) {
		for (size_t jj = 0; jj < memblocksize; jj++) {
			uint8_t xor=  local_output_1[ii * memblocksize + jj]^ local_output_2[ii * memblocksize + jj];
			dpf_with_values[ii * memblocksize + jj]=xor;
		}
	}
	free(local_output_1);
	free(local_output_2);

	bool succ=true;
	bool print=true;

	bool was_zero=true;
	for (int i = 0; i < memblocksize; ++i){
		if(activ_value[i]!=0){
			was_zero=false;
		}
	}
	if(was_zero && index<size){
		printf("TEST_dpf_proper:  activ_value has wrong value after reveal. Was 0, but should be greater than 0. \n");
		succ=false;
		print=true;
	}
	if(!was_zero && index>size){
		printf("TEST_dpf_proper: WARNING activ_value has wrong value after reveal. Should be 0, but was not. \n");
	}

	
	for(int i=0; i<size; i++){
		if(i==index && dpf[i]!=1 ){
			printf("TEST_dpf_proper: Resulting Dpf is not 1 at index %d.\n", index);
				print=true;
				succ=false;

		}else if(dpf[i]!=0 && i!=index){
			printf("TEST_dpf_proper: Resulting Dpf is not 0 at %d.\n", i);
			print=true;
			succ=false;
			break;
		}
	}

	if(index<size && index>=0){
		for (int i = 0; i <memblocksize ; ++i){
			uint8_t a=dpf_with_values[index * memblocksize + i];
			uint8_t b=activ_value[i];
			if(a!=b){
				printf("TEST_dpf_proper: active_block_delta was not the same as the actual difference in block %d.\n", i);
				print=true;
				succ=false;
			}
		}
	}	

	for (int i = 0; i < size; ++i){
		for (int j = 0; j <memblocksize ; ++j){
			uint8_t a=dpf_with_values[i * memblocksize + j];
			if(i!=index && a!=0){
				printf("TEST_dpf_proper: block %d in position %d (not the index) was not zero.\n", j, i);
				print=true;
				succ=false;
			}
		}
	}

	if(print){

		printf("Size: %d Index: %d\n",size, index );
		char *buff=calloc(size+100, sizeof(int));
		sprintf(buff, "TEST_dpf_proper: dpf   		 	 ");  

		for(int j = 0; j <size ; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", dpf[j]);		
		  	strcat(buff, r );  
		}
		printf("%s\n",buff);
		free(buff);


		printf("dpf_with_values\n");
		for(int i = 0; i <size ; i++) {
			for (size_t jj = 0; jj < memblocksize/sizeof(uint8_t); jj++) {
				printf(" %d", dpf_with_values[i * memblocksize/sizeof(uint8_t) + jj]);		
			}
			printf("\n");
		}
			
		printf("active value\n");
		for (size_t jj = 0; jj < memblocksize; jj++) {
			printf(" %d", activ_value[jj]);		
		}
		printf("\n");

	}

	free(dpf);
	free(dpf_with_values);
	free(activ_value);
	return succ;

}



bool TEST_dpf(size_t size, int index){
	bool *vector;
	obliv uint8_t *value = calloc(1, memblocksize * sizeof(obliv uint8_t));
	obliv size_t index_obliv=feedOblivInt(index, 1);
	dpf(size,index_obliv, value, 0,&vector);
	
	uint8_t *activ_value = calloc(1, memblocksize * sizeof(uint8_t));
	revealOblivLLongArray((uint64_t *)activ_value, (uint64_t *)value,memblocksize/sizeof(uint64_t),  0);


	obliv bool *v1= calloc(size, sizeof(obliv bool));
	obliv bool *v2= calloc(size, sizeof(obliv bool));
	feedOblivBoolArray(v1, vector, size, 1);
	feedOblivBoolArray(v2, vector, size, 2);
	obliv bool *dpf_obliv= calloc(size, sizeof(obliv bool));
	for(int i = 0; i <size ; i++) {
		dpf_obliv[i]=v1[i]^v2[i]; 
	}
	free(v1);
	free(v2);
	bool *dpf= calloc(size, sizeof(bool ));
	revealOblivBoolArray(dpf, dpf_obliv, size, 0);
	free(dpf_obliv);

	bool succ=true;
	bool print=false;

	bool was_zero=true;
	for (int i = 0; i < memblocksize; ++i){
		if(activ_value[i]!=0){
			was_zero=false;
		}
	}

	if(was_zero && index<size){
		printf("TEST_dpf:  activ_value has wrong value after reveal. Was 0, but should be greater than 0. \n");
		succ=false;
	}



	for(int i=0; i<size; i++){
		if(i==index && dpf[i]!=1 ){
			printf("TEST_dpf: Resulting Dpf is not 1 at index %d.\n", index);
				print=true;
				succ=false;

		}else if(dpf[i]!=0 && i!=index){
			printf("TEST_dpf: Resulting Dpf is not 0 at %d.\n", i);
			print=true;
			succ=false;
			break;
		}
	}

	if(print){

		char *buff=calloc(size+100, sizeof(int));
		sprintf(buff, "TEST_dpf: dpf   		 	 ");  

		for(int j = 0; j <size ; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", dpf[j]);		
		  	strcat(buff, r );  
		}
		printf("%s\n",buff);
		free(buff);


		printf("active value\n");
		for (size_t jj = 0; jj < memblocksize; jj++) {
			printf(" %d", activ_value[jj]);		
		}
		printf("\n");
	}

	free(activ_value);
	free(vector);
	free(value);
	free(dpf);
	return succ;

}


void TEST_ALL_mpfss_naive(bool *err){

	printf("\n\nTesting MPFSS Naive-----------------------------------------------.----\n");


	printf("TEST_dpf---------------------------------------------------------\n" );
	if(!TEST_dpf(10, 3 )){
		printf("%s\n", "TEST_dpf(10,3) failed" );
		*err=1;
	}
	if(!TEST_dpf(10, 11 )){
		printf("%s\n", "TEST_dpf(10,11) failed" );
		*err=1;
	}

	if(!TEST_dpf(100, 101 )){
		printf("%s\n", "TEST_dpf(100, 101 ) failed" );
		*err=1;
	}
	printf("TEST_dpf_proper---------------------------------------------------------\n" );

	if(!TEST_dpf_proper(10, 3 )){
		printf("%s\n", "TEST_dpf_proper(10,3) failed" );
		*err=1;
	}
	if(!TEST_dpf_proper(10, 11 )){
		printf("%s\n", "TEST_dpf_proper(10,11) failed" );
		*err=1;
	}

	if(!TEST_dpf_proper(100, 101 )){
		printf("%s\n", "TEST_dpf_proper(100, 101 ) failed" );
		*err=1;
	}
	printf("TEST_with_beta_obliv---------------------------------------------------------\n" );

	if(!TEST_with_beta_obliv(10, 3 )){
		printf("%s\n", "TEST_with_beta_obliv(10,3) failed" );
		*err=1;
	}

	printf("TEST_new_mpfss_naive---------------------------------------------------------\n" );
	if(!TEST_new_mpfss_naive( 6, (size_t) 10)){
		printf("%s\n", "TEST_new_mpfss_naive( 6, (size_t) 10 ) failed" );
		*err=1;
	}

	printf("TEST_get_mpfss_vector---------------------------------------------------------\n" );
	if(!TEST_get_mpfss_vector( 4, (size_t) 10)){
		printf("%s\n", "TEST_get_mpfss_vector( 4, (size_t) 10) failed" );
		*err=1;
	} 

	if(!TEST_get_mpfss_vector( 5, (size_t) 100)){
		printf("%s\n", "TEST_get_mpfss_vector( 4, (size_t) 10) failed" );
		*err=1;
	}
}


