#include <stdlib.h>
#include <stdint.h>

#include <obliv.oh>
#include <copy.oh>
#include <osort.oh>
#include <floram_util.h>

#include "dbg.h"

#include "includes/create_structs/create_structs.h"
#include "includes/create_structs/create_structs.oh"



obliv int8_t cmp_by_index(OcCopy *cpy, void *el1, void *el2) {
	obliv char ret=1;

	obliv if(((obliv int *) el1)[0] <  ((obliv int *) el2)[0]){
		ret=-1;
	}

	return ret;
}

obliv int8_t cmp_by_bucketNo(OcCopy *cpy, void *el1, void *el2) {
	obliv char ret=1;

	obliv if(((obliv int *) el1)[1] <  ((obliv int *) el2)[1]){
		ret=-1;
	}

	return ret;
}

//TODO:Nach inlcudes verlagern und mit function von mpfss_cuckoo zusammen nehmen
void create_beta_vals(mpfss_cuckoo *m, match **matches, uint8_t **share, match_ext **matches_ext, int memblocksize){

	uint8_t **share_padded=calloc(m->b, sizeof(uint8_t *));
	int unused=m->b - m->t;
	for (int i = 0; i < m->b; ++i){
		if(i < unused){
			uint8_t *padding_item=calloc(memblocksize, sizeof(uint8_t));
			share_padded[i]=padding_item;
		}else{
			share_padded[i]=share[i- unused];
		}
	}	

	obliv uint8_t **share1=calloc(m->b, sizeof(obliv uint8_t *));
	for (int i = 0; i < m->b; ++i){	
		obliv uint8_t *share1_part=calloc(memblocksize, sizeof(obliv uint8_t));
		feedOblivLLongArray((obliv uint64_t *)share1_part, (uint64_t *) share_padded[i],  memblocksize/sizeof(uint64_t), 1);
		share1[i]=share1_part;
	}

	obliv uint8_t **share2=calloc(m->b, sizeof(obliv uint8_t *));
	for (int i = 0; i < m->b; ++i){	
		obliv uint8_t *share2_part=calloc(memblocksize, sizeof(obliv uint8_t));
		feedOblivLLongArray((obliv uint64_t *)share2_part, (uint64_t *) share_padded[i],  memblocksize/sizeof(uint64_t), 2);
		share2[i]=share2_part;
	}


	obliv uint8_t **shareXor=calloc(m->b, sizeof(obliv uint8_t*));
	for (int i = 0; i < m->b; ++i){
		obliv uint8_t *shareXor_temp=calloc(1, memblocksize * sizeof(obliv uint8_t));
		shareXor[i]=shareXor_temp;
		for (int j = 0; j < memblocksize; ++j){
			shareXor[i][j]=share1[i][j]^share2[i][j];
		}
	}

	/*#ifdef DEBUG
		debug("share party 1\n");
		for (int i = 0; i < m->t; ++i){
			for (int ii = 0; ii < memblocksize; ++ii){
				int bucket_temp;
				revealOblivInt(&bucket_temp,share1[i][ii],0);
				printf("%d ", bucket_temp);
			}
			printf("\n");
		}

		debug("share party 2\n");
		for (int i = 0; i < m->t; ++i){
			for (int ii = 0; ii < memblocksize; ++ii){
				int bucket_temp;
				revealOblivInt(&bucket_temp,share2[i][ii],0);
				printf("%d ", bucket_temp);
			}
			printf("\n");
		}

		debug("xor of shares");
		for (int i = 0; i < m->t; ++i){
			for (int ii = 0; ii < memblocksize; ++ii){
				int bucket_temp;
				revealOblivInt(&bucket_temp,shareXor[i][ii],0);
				printf("%d ", bucket_temp);
			}
			printf("\n");
		}
	#endif*/


	int e_s=2+memblocksize;
	OcCopy cpy = ocCopyIntN(e_s); //set to size of a single element
	

	obliv int *list=calloc(m->b*e_s,sizeof(obliv int));
	for (int i = 0; i < m->b; ++i){
		match_ext *me=calloc(1, sizeof(match_ext));
		me->this_m=matches[i];
		me->index=feedOblivInt( matches[i]->val, 1);

		matches_ext[i]=me;
		list[e_s*i+0]=me->index;
		list[e_s*i+1]=i;
	}

	osort_batcher(&cpy, (void *) list, (size_t)m->b, cmp_by_index);
	//ocCopyRelease(&cpy); causes seg fault

	#ifdef DEBUG
		for (int i = 0; i < m->b; ++i){

			int index_temp;
			revealOblivInt(&index_temp,list[2*i+0],0);
			int bucket_temp;
			revealOblivInt(&bucket_temp,list[2*i+1],0);
			debug("index %d, batch_no %d", index_temp, bucket_temp);
		}
	#endif

	for (int i = 0; i <m->b ; ++i){
		for (int ii = 0; ii < memblocksize ; ++ii){
			list[e_s*i+2+ii]=shareXor[i][ii];
		}
	}




	osort_batcher(&cpy, (void *) list, (size_t)m->b, cmp_by_bucketNo);

	for (int i = 0; i < m->b; ++i){
		obliv uint8_t *this_beta=calloc(memblocksize, sizeof(obliv uint8_t));
		for (int ii = 0; ii < memblocksize; ++ii){
			this_beta[ii]=list[e_s*i+2+ii];
		}
		matches_ext[i]->beta=this_beta;	
	}
 
	free(list);
	for (int i = 0; i < m->b; ++i){
		free(share1[i]);
		free(share2[i]);
		free(shareXor[i]);
	}
	free(share1);
	free(share2);
	free(shareXor);

	#ifdef DEBUG
		for (int i = 0; i < m->b; ++i){
			obliv uint8_t *this_beta=matches_ext[i]->beta;
			for (int ii = 0; ii < memblocksize; ++ii){
				int part;
				revealOblivInt(&part,this_beta[ii],0);
				printf("%d ",part );
			}
			printf("\n");
		}
	#endif

}
