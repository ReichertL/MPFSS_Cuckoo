#include <stdlib.h>
#include <stdint.h>
#include <pthread.h>

#include <obliv.oh>
#include <copy.oh>
#include <obig.oh>
#include <osort.oh>


#include "dbg.h"
#include "mpfss_naive.h"
#include "mpfss_naive.oh"
#include "mpfss_cuckoo.oh"
#include "includes/create_structs/create_structs.h"
#include "includes/create_structs/create_structs.oh"
#include "includes/secret_share_beta.oh"

#include "parallel_dpf.h"
#include "parallel.h"
 

void vole_call_dpf_from_matches(match **matches,bool **dpf_vectors,
	uint8_t *** dpf_value_vectors, mpfss_cuckoo *m, int *bucket_lenghts, 
	bool set_beta, uint8_t **beta_value_vector, 
	uint8_t *beta_skalar_no,
	bool cprg){

	//synchronize	
	if(ocCurrentParty()==1){
		ocBroadcastInt(1, 1);
	}else{
		int ok=3;
		while(!( ok==1)){
			ok= ocBroadcastInt(1, 1);
		}
	}

	int count=0;



	for (int i = 0; i < m->b; ++i){
		int index_non_obliv;  		
		if(ocCurrentParty()==1){
  			index_non_obliv=(size_t)matches[i]->index_in_bucket;
  			debug("index_non_obliv %d\n", index_non_obliv);
  			if(index_non_obliv==-1){
  				debug("empty batch!\n");
  			}
  		}

	  	bool *local_bit_output;
	  	uint8_t *local_output;

	  	if(set_beta){
	  		uint8_t *beta_value_no;
		  	if(ocCurrentParty()==1 && index_non_obliv!=-1){
		  		beta_value_no = beta_value_vector[count];
		  		count++;
		  	}else if(ocCurrentParty()==1 && index_non_obliv==-1){
		  		beta_value_no=(uint8_t *) calloc(memblocksize, sizeof(uint8_t)); 
		  	}else{
		  		beta_value_no=NULL;
		  	}


		  	obliv uint8_t *beta_value=calloc(1, memblocksize * sizeof(obliv uint8_t));
			feedOblivLLongArray((obliv uint64_t *)beta_value, (uint64_t *) beta_value_no,  memblocksize/sizeof(uint64_t), 1);
	
			obliv uint8_t *beta_skalar=calloc(memblocksize, sizeof(obliv uint8_t));
			feedOblivLLongArray((obliv uint64_t *)beta_skalar, (uint64_t *) beta_skalar_no,  memblocksize/sizeof(uint64_t), 2);

			obig prod;	
			obig obig_s;
			obig obig_b;

			obig_init(&prod, memblocksize);
			obig_init(&obig_s, memblocksize);
			obig_init(&obig_b, memblocksize);

			obig_import_opointed_be(&obig_s, beta_skalar, memblocksize );
			obig_import_opointed_be(&obig_b, beta_value, memblocksize );
			obig_mul(&prod, obig_s, obig_b);		

			obliv uint8_t *xor_prod=calloc(memblocksize, sizeof(obliv uint8_t));
			obig_export_opointed_be(xor_prod,memblocksize, &prod);

			dpf_with_beta( 		(size_t) bucket_lenghts[i],
								index_non_obliv, 
								xor_prod, 
								i,  									
								&local_bit_output,
								&local_output,
								cprg);	

			free(beta_value);
			free(beta_skalar);
			free(xor_prod);
			obig_free(&obig_s);
			obig_free(&obig_b);
			obig_free(&prod);

	  	}else{
	  		obliv uint8_t *active_block_delta;
		  	dpf_proper( bucket_lenghts[i],
						index_non_obliv,
						&active_block_delta,
						i,  
						&local_bit_output,
						&local_output,
						cprg);
		  	free(active_block_delta);
		}				
	  	
		dpf_vectors[i]=local_bit_output;
		dpf_value_vectors[i]=local_output;
	}
}

/*void call_dpf_thread_entry(void * params_less){



	void ** params = (void **) params_less;
	
	match_ext ** matches_ext=(match_ext **)params[0];
	
	bool **dpf_vectors = (bool **) params[1];
	uint8_t *** dpf_value_vectors= (uint8_t ***) params[2];
	int * bucket_lenghts=(int *)params[3];
	bool cprg= (bool) params[4];
	int i= (int) params[5];
	ProtocolDesc *pd = (ProtocolDesc *) params[6];
	if (pd != NULL) ocSetCurrentProto(pd);


	match_ext *me = matches_ext[i];
	int index_non_obliv;  		
	if(ocCurrentParty()==1){
  		index_non_obliv=(size_t)me->this_m->index_in_bucket;
  		if(index_non_obliv==-1){
  			debug("index in batch %d: %d, empty batch!\n",i,  index_non_obliv);
  		}else{
  			debug("index in batch %d: %d\n",i,  index_non_obliv);
		}
	}

  	bool *local_bit_output;
  	uint8_t *local_output;
	dpf_with_beta( 		(size_t) bucket_lenghts[i],
						index_non_obliv, 
						me->beta, 
						i,  									
						&local_bit_output,
						&local_output,
						cprg);	 	
	dpf_vectors[i]=local_bit_output;
	dpf_value_vectors[i]=local_output;

	if (pd != NULL) oflush(pd);
}*/

void call_dpf_from_matches(match_ext **matches_ext,bool **dpf_vectors,
	uint8_t *** dpf_value_vectors, mpfss_cuckoo *m, int *bucket_lenghts, 
	bool cprg){

	//synchronize	
	if(ocCurrentParty()==1){
		ocBroadcastInt(1, 1);
	}else{
		int ok=3;
		while(!( ok==1)){
			ok= ocBroadcastInt(1, 1);
		}
	}

	void ** params=calloc(5, sizeof(void *));
	params[0]=(void *)matches_ext;
	params[1]=(void *)dpf_vectors;
	params[2]=(void *) dpf_value_vectors;
	params[3]=(void *) bucket_lenghts;
	params[4]=(void *) false; //TODO

	ProtocolDesc ** list_pd_split=calloc(m->b, sizeof(ProtocolDesc *));


	for (int i = 0; i < (m->b); ++i){
		ProtocolDesc* pd_split= calloc(1, sizeof(ProtocolDesc));
		ocSplitProto(pd_split, ocCurrentProto());
		list_pd_split[i]=pd_split;


  		/*pthread_t dpf_thread;
		if(pthread_create(&dpf_thread, NULL, call_dpf_thread_entry, (void *)params)){
			log_err("Error creating thread %d\n", i);
		}

		if(pthread_join(dpf_thread, NULL)) {

			log_err( "Error joining thread %d\n",i);
	
		}
		call_dpf_thread_entry(params);*/
	}	

	parallize(call_dpf_threaded, (void **) list_pd_split, m->b, (void *) params);

}




bool *reveal_vector(bool *vector, int vector_size, int print){

	obliv bool *v1= calloc(vector_size, sizeof(obliv bool));
	obliv bool *v2= calloc(vector_size, sizeof(obliv bool));
	feedOblivBoolArray(v1, vector, vector_size, 1);
	feedOblivBoolArray(v2, vector, vector_size, 2);

	obliv bool *dpf_obliv= calloc(vector_size, sizeof(obliv bool));
	for(int i = 0; i <vector_size ; i++) {
			dpf_obliv[i]=v1[i]^v2[i]; 
	}    
	free(v1);
	free(v2);
	
	bool *reveald_vector= calloc(vector_size, sizeof(bool));
	revealOblivBoolArray(reveald_vector, dpf_obliv, vector_size, 0);
	free(dpf_obliv);

	if(print==1){

		char *buff=calloc(vector_size*2+100, sizeof(int));
		sprintf(buff, "Revealed Vector: ");  
		for(int j = 0; j <vector_size; j++) {
			char r[1+ sizeof(int)];
			sprintf(r, " %d", reveald_vector[j]);		
		  	strcat(buff, r );  
		}
		debug("%s\n",buff);
		log_info("%s\n",buff);
		free(buff);

	}
	return reveald_vector;
}

//simplification: one side has to know beta values
void mpfss_vole_batch_cuckoo(void* args){

	yao_arguments *y_args= (yao_arguments *) args;
	mpfss_cuckoo *m=(mpfss_cuckoo *) y_args->m;
	int b=m->b;
	int size=m->size;
	int *bucket_lenghts=(int *) y_args->bucket_lenghts;
    match **matches =(match **) y_args->matches;
	int ** all_buckets_array= (int ** )y_args->all_buckets_array;
	uint8_t **beta_value_vector=(uint8_t **) y_args->beta_value_vector;
	uint8_t *beta_skalar=(uint8_t *) y_args->skalar;


	bool **dpf_vectors= (bool **)calloc(b, sizeof( bool *));
	uint8_t *** dpf_value_vectors= (uint8_t **)calloc(b, sizeof( uint8_t **));
	bool *mpfss_bit_vector=calloc(size, sizeof(bool));
	uint8_t **mpfss_value_vector=calloc(size, sizeof(uint8_t *));
	for (int i = 0; i < size; ++i){
		uint8_t * val=calloc(1,memblocksize);
		mpfss_value_vector[i]=val;
	}

	vole_call_dpf_from_matches(	matches,dpf_vectors,dpf_value_vectors, 
							m, bucket_lenghts, y_args->set_beta , 
							beta_value_vector,beta_skalar,
							y_args->cprg);

	create_mpfss_vector_cuckoo(	mpfss_bit_vector, mpfss_value_vector, 
								dpf_vectors, dpf_value_vectors, 
								all_buckets_array, bucket_lenghts, size, b, memblocksize);


	#ifdef DEBUG
        printf("MPFSS VOLE with Values \n");
        for (int i = 0; i < size; ++i){
        	for (int k = 0; k < memblocksize; ++k){
	            uint8_t value=mpfss_value_vector[i][k];
	            obliv int val1_o=feedOblivInt(value, 1);
	            obliv int val2_o=feedOblivInt(value, 2);
	            int val1;
	            revealOblivInt(&val1, val1_o, 0);
	            int val2;
	            revealOblivInt(&val2, val2_o, 0);
	            printf("%d ",val1 ^val2);
        	}
        	printf("\n");
        }
	#endif

	for (int i = 0; i < b; ++i){
		free(dpf_vectors[i]);
		free(dpf_value_vectors[i]);
	}
	free(dpf_vectors);
	free(dpf_value_vectors);

	y_args->mpfss_bit_output=mpfss_bit_vector;
	y_args->mpfss_output=mpfss_value_vector;
}

//more generall version: not nececarry for one  side to now beta  values
void mpfss_batch_cuckoo(void* args){

	yao_arguments *y_args= (yao_arguments *) args;
	mpfss_cuckoo *m=(mpfss_cuckoo *) y_args->m;
	int b=m->b;
	int size=m->size;
	int *bucket_lenghts=(int *) y_args->bucket_lenghts;
    match **matches =(match **) y_args->matches;
	int ** all_buckets_array= (int ** )y_args->all_buckets_array;
	uint8_t **share=(uint8_t **) y_args->beta_value_vector;


	bool **dpf_vectors= (bool **)calloc(b, sizeof( bool *));
	uint8_t *** dpf_value_vectors= (uint8_t **)calloc(b, sizeof( uint8_t **));
	bool *mpfss_bit_vector=calloc(size, sizeof(bool));
	uint8_t **mpfss_value_vector=calloc(size, sizeof(uint8_t *));
	for (int i = 0; i < size; ++i){
		uint8_t * val=calloc(1,memblocksize);
		mpfss_value_vector[i]=val;
	}

	match_ext **matches_ext = calloc (m->b, sizeof(match_ext *));
	create_beta_vals(m, matches, share, matches_ext, memblocksize );
	

	call_dpf_from_matches(	matches_ext,dpf_vectors,dpf_value_vectors, 
							m, bucket_lenghts,y_args->cprg);


	create_mpfss_vector_cuckoo(	mpfss_bit_vector, mpfss_value_vector, 
								dpf_vectors, dpf_value_vectors, 
								all_buckets_array, bucket_lenghts, size, b, memblocksize);


	for (int i = 0; i < b; ++i){
		free(dpf_vectors[i]);
		free(dpf_value_vectors[i]);
		free(matches_ext[i]);
	}
	free(dpf_vectors);
	free(dpf_value_vectors);
	free(matches_ext);
	y_args->mpfss_bit_output=mpfss_bit_vector;
	y_args->mpfss_output=mpfss_value_vector;
}


