#include <stdlib.h>
#include <stdint.h>

#include <obliv.oh>

#include "dbg.h"
#include "mpfss_naive.h"
#include "mpfss_naive.oh"
#include "includes/create_structs/create_structs.h"
#include "includes/create_structs/create_structs.oh"
#include "create_structs_new.h"
#include "includes/secret_share_beta.oh"



void mpfss_single_bucket(void* args){
	yao_arguments_new *y_args= (yao_arguments_new *) args;
	mpfss_cuckoo *m=(mpfss_cuckoo *) y_args->m;
	int *bucket_lenghts=(int *) y_args->bucket_lenghts;
    match **matches =(match **) y_args->matches;
	uint8_t **share=(uint8_t **) y_args->beta_value_vector;
	int bucket_no=y_args->bucket_no;


	match_ext **matches_ext = calloc (m->b, sizeof(match_ext *));
	create_beta_vals(m, matches, share, matches_ext, memblocksize );
	
	//synchronize	
	if(ocCurrentParty()==1){
		ocBroadcastInt(1, 1);
	}else{
		int ok=3;
		while(!( ok==1)){
			ok= ocBroadcastInt(1, 1);
		}
	}

	match_ext *me = matches_ext[bucket_no];
	size_t index_non_obliv=0;  		
	if(ocCurrentParty()==1){
  		index_non_obliv=(size_t)me->this_m->index_in_bucket;
  		if(index_non_obliv==-1){
  			debug("index in batch %d: %d, empty batch!\n",bucket_no,  index_non_obliv);
  		}else{
  			debug("index in batch %d: %d\n",bucket_no,  index_non_obliv);
		}
  	}

  	bool *local_bit_output;
	uint8_t *local_output;
	size_t bl=bucket_lenghts[bucket_no];
	bool cprg=y_args->cprg;
	dpf_with_beta( 	bl,
					index_non_obliv, 
					me->beta, 
					bucket_no,  									
					&local_bit_output,
					&local_output,
					cprg);	
  	
  	for (int i = 0; i < m->b; ++i){
  		free(matches_ext[i]->beta);
  		free(matches_ext[i]);
  	}
  	free(matches_ext);
	y_args->dpf_bit_output=local_bit_output;
	y_args->dpf_output=local_output;

	#ifdef DEBUG
        printf("DPF with Values \n");
        for (int i = 0; i < bucket_lenghts[bucket_no]; ++i){
        	for (int k = 0; k < memblocksize;k++){
	            uint8_t value=local_output[i*memblocksize+k];
	            int val1=ocBroadcastInt((int)value, 1);
	            int val2=ocBroadcastInt((int)value, 2);
	            printf("%d ",val1 ^val2);
        	}
        	printf("\n");
        }
	#endif

    oflush(ocCurrentProto());

}