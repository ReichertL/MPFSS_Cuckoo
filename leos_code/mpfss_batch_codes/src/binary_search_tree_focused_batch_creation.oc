#include <stdlib.h>
#include <obliv.oh>
#include "dbg.h"
#include <string.h>
#include <math.h>
#include <fss_cprg.oh>
#include <time.h>
#include <bcrandom.h>


#include "binary_search_tree.h"
#include "list_utils.h"
#include "linked_list.h"
#include "mpfss_naive.oh"

#include "mpfss_batch_codes.oh"


void create_batches_bst( mpfss_batch *mpfss, BCipherRandomGen *random_gen, dllnode_t **bt_roots, int *batch_len ){

  	double size=mpfss->size;
  	int m= mpfss->m_rounded;
  	int d= mpfss-> d_rounded;
	
  	dllnode_t *list_prev;


  	for(int i=0; i<m; i++){
  		batch_len[i]=0;
		
		//creating linked list holding roots of binary search trees
		struct bt_node *batch_root = NULL; 
		if(i==0){
			dllnode_t *first=create_head(batch_root, 0);
			
			list_prev=first;
			bt_roots[0]=first;
		}else{
			dllnode_t *element=insert_dllnode( list_prev, batch_root, i);
			
			list_prev=element;
			bt_roots[i]=element;
		}
  	}

  	/*printf("vals of bt roots\n");
  	for(int i=0;i<m;i++){
  		printf("%d \n", bt_roots[i]->val);
  	}*/

  	for(int i=0; i<size; i++){
  		for(int j=0; j<d;j++){
  			
  			/*	bcrandom generates different values for both parties (even with same seed),
  			 	so they need to be broadcasted. 
  			*/
  			unsigned long long rand= bcRandomInt(random_gen, (unsigned long long) m);
  			int r_a;
  			int r_b;
  			r_a=ocBroadcastInt((int)rand, 1);
  			r_b=ocBroadcastInt((int)rand, 2);
			int r= (r_a+r_b)% m;

			int index_in_batch=batch_len[r];
			batch_len[r]=batch_len[r]+1;

			//create one big binary search tree: O(log(n) pro insert)
			dllnode_t *element =bt_roots[r]; 
			struct bt_node *batch_root=element->s;
			batchelement_t *batchelem=calloc(1, sizeof(batchelement_t));
			batchelem->index_in_batch=index_in_batch;
			batchelem->batch_no=r;
			batchelem->val=i;

			//printf("index_in_batch %d batch_no %d val %d\n",batchelem->index_in_batch,batchelem->batch_no,  batchelem->val );
			if(batch_root==NULL){
				element->s=insert( NULL, batchelem, i);

			}else{
				insert(batch_root,batchelem, i);
			}
  		}
  	}

  	#ifdef DEBUG

	  	printf("\n");
	  	int n=0;
	  	for(int i=0; i<m; i++){
	  		printf("Bucket %d: %d \n", i , batch_len[i] );
	  		n+=batch_len[i];
	  	}
	  	printf("N: %d\n", n );


		dllnode_t *batch_root=bt_roots[0];

  		while(true){
	  		printf("batch %d :", batch_root->val );
			struct bt_node *this_batch=batch_root->s;

	  		inorder(this_batch);
	  		printf("\n");



	  		if(batch_root->next==NULL){
	  			break;
  			}
  			batch_root=batch_root->next;
  		}
  	#endif
	//log_info("successfully created graph\n");
	
}

bool combine_batches_indices_bst(dllnode_t **bt_roots,  mpfss_batch *mpfss , int *indices_notobliv, pointinfo_t **matches){
	int t=mpfss->t;
	int last_batch=false;
	dllnode_t *element =bt_roots[0]; 

	for(int j=0; j<t; j++){
		int index= indices_notobliv[j];
		//printf("index %d\n", index );
		while(!last_batch){
			//printf("element->val %d\n", element-> val);
			struct bt_node *batch_root=(struct bt_node *)element->s;
	  		struct bt_node *res=search(batch_root, index);
	  		//inorder(batch_root);
	  		//printf("\n");

	  		if(res==NULL && element->next==NULL){
  				//debug("No available batch found for index %d \n", index );
	  			return false;
	  		}else if(res != NULL){
	  			//key was found in this batch

	  			batchelement_t *this_node=(batchelement_t *)res->s;
	  			
				pointinfo_t *p=calloc(1, sizeof(pointinfo_t));
			  	p->val=index;
			  	p->batch=element->val;
			  	int index_in_batch=this_node->index_in_batch;
				p->index_in_batch=index_in_batch;
				//sorting matches by their corresponding batch number
				matches[p->batch]=p;

				
	  			debug("index: %d batch_no: %d index_in_batch: %d \n", index, p->batch,p->index_in_batch);
	  		
	  			dllnode_t *some_node=delink_dllnode(element);
	  			if(some_node==NULL){
	  				//All indices have been assigned
	  				
		  			log_info("successfully matched indices and batches\n");
		  			
	  				return true;
	  			}
				element=get_head(some_node);
				
	  			break;
	  		}

	  		element=element->next;

	  	}
  	}
  	return true;
}

/*	Function calls get_batch_vectors() and organizes the output.
*/
void get_mpfss_vector_bc_bst(mpfss_batch *mpfss,obliv uint8_t *values, obliv bool *mpfss_vector, pointinfo_t **matches, dllnode_t **bt_roots,  int *batch_len ){
  	int m= mpfss->m_rounded;
  	int size=mpfss->size;

  	obliv bool **vectors= calloc(m, sizeof(obliv bool *));
	get_batch_vectors(mpfss, matches, vectors, values, batch_len);

	#ifdef DEBUG
		printf("results\n");
	  	for(int i=0; i<m; i++){
	  				
	  		bool *vdpf2= calloc(size, sizeof(bool));
			revealOblivBoolArray(vdpf2, vectors[i], size, 0);
	  		for(int j=0; j<batch_len[i]; j++){
	  			printf("%d ", vdpf2[j]);  
			}
			printf(" \n");        
			free(vdpf2);
	  	}
  	#endif
  	

	/*	Going trough each batch and figuring out for each element in batch the values from the encrypted vector
	 	Then xor that value with the corresponding value of an array of length 'size', called mpfss_vector.
	  */
  	for (int i=0; i<m; i++){
  		//int batchsize=batch_len[i];
  		dllnode_t *batch_root=bt_roots[i];

  		//binary search tree version of batch
  		struct bt_node *this_batch=batch_root->s;
  		//empty array, to be filled
	  	batchelement_t **array=calloc(batch_len[i], sizeof(batchelement_t *));
	  	//writes batchelement-structs from binary search tree version of batch to an array of batchelements
	  	write_in_array(this_batch, array, 1);
	  	//printf("batch %d",i);
	  	for(int j=0; j<batch_len[i]; j++){

	  		batchelement_t *elem=array[j];
	  		int x=elem->val;
	  		int index_in_batch= elem->index_in_batch;
	  		mpfss_vector[x]=mpfss_vector[x] | vectors[i][index_in_batch];
	  	}
  	}

	#ifdef DEBUG
		bool *vdpf2= calloc(size, sizeof(bool));
		revealOblivBoolArray(vdpf2, mpfss_vector, size, 0);
		printf("Final Revealed MPFSS Value\n");

		for(int i=0; i<size;i++){
			printf("%d ", vdpf2[i]);
		}
		free(vdpf2);
		printf("\n");
		for(int i=0;i<m;i++){
			int v_value=0;
			int *v_value_ptr=&v_value;
			revealOblivInt(v_value_ptr, values[i], 0);
			printf("%d ", v_value );
		}
		printf("\n");
	#endif




  	free(vectors);

}

/*  Example for creating a MPFSS Schema. Not Tested. 
	Callable from execYaoProtocol().
	Input:
	  void* args -> mpfss *mpfss

	Output
	  No return type.
*/
void mpfss_batch_codes_bst(void* args){

  	mpfss_batch *mpfss = (mpfss_batch*) args;
  	int t=mpfss->t;
  	int size=mpfss->size;
  	int m= mpfss->m_rounded;

		/*Array of pointers: Length of pointers depend on system*/

  	//node_t **batches = calloc(m, sizeof(node_t *));
  	//batch_t *batch_head=calloc(1,sizeof(batch_t));
	dllnode_t **bt_roots = calloc(m, sizeof(dllnode_t *));
	int *indices_notobliv = calloc(t, sizeof(int));
  	int *batch_len=calloc(m, sizeof(int));
	pointinfo_t **matches=calloc(t, sizeof(pointinfo_t *));
	int success =false;

  	BCipherRandomGen *random_gen= newBCipherRandomGen();

	/*Peer 1 generates indices at random*/
  	if(ocCurrentParty()==1){
		//dllnode_t *head=calloc(1,sizeof(dllnode_t));

	   	create_indices(random_gen, indices_notobliv, t , size);
		create_batches_bst(mpfss,random_gen,bt_roots, batch_len );
		success=combine_batches_indices_bst(bt_roots,  mpfss , indices_notobliv, matches);


  		ocBroadcastInt(success, 1);
  		printf("success %d\n", success);
  		if(!success){
  			exit(1);
  		}

	}else{
		create_batches_bst(mpfss,random_gen,bt_roots, batch_len );
	
		int ok=3;
		while(!( ok==1 || ok==0)){

			ok= ocBroadcastInt(1, 1);
			//printf("%d \n", ok);

		}
		if(ok==0){
			log_err("Matching indices and batches failed multiple times.\n");
			exit(1);
		}
	
	}	



  	obliv uint8_t *values = calloc(m, BLOCKSIZE*sizeof(obliv uint8_t)*block_no);
	obliv bool *mpfss_vector= calloc(size, sizeof( obliv bool));
	get_mpfss_vector_bc(mpfss, values, mpfss_vector,  matches, inputfield, batch_len );

	#ifdef DEBUG
		bool *vdpf2= calloc(size, sizeof(bool));
		revealOblivBoolArray(vdpf2, mpfss_vector, size, 0);
		printf("Final Revealed MPFSS Value\n");

		for(int i=0; i<size;i++){
			printf("%d ", vdpf2[i]);
		}
		free(vdpf2);
		printf("\n");
		for(int i=0;i<m;i++){
			int v_value=0;
			int *v_value_ptr=&v_value;
			revealOblivInt(v_value_ptr, values[i], 0);
			printf("%d ", v_value );
		}
		printf("\n");
	#endif


  	free(random_gen);
  	free(indices_notobliv);
  	free(batch_len);
  	for(int i=0; i<m;i++){
  		free(bt_roots[i]);
  	}
  	free(bt_roots);
  	free(mpfss_vector);
  	free(matches);
}