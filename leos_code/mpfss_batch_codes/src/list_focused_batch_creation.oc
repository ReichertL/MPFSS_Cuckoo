#include <obliv.oh>
#include "binary_search_tree.h"
#include "list_utils.h"
#include "linked_list.h"
#include <bcrandom.h>

#include "mpfss_batch_codes.oh"

/*	Creates batches of the input field.
	There will be m batches, each can have a different length.
	Over all batches on element from the input field will appear d times.
	
	Input: 
		The mpfss_batch "mpfss" input will contain values for execution, such as d and m.
		"random_str" hold a seed for the random number generator. Can be different for both sides.
	Output: After return "bachtes" will hold a pointer to an array of list heads.
	Each head point to a list of node_t elements which represents one batch.
	
*/
void create_batches( mpfss_batch *mpfss, char *random_str[], node_t **batches, batch_t *batch_head, dllnode_t **bt_roots){

  	double size=mpfss->size;
  	int m= mpfss->m_rounded;
  	int d= mpfss-> d_rounded;

	BCipherRandomGen *random_gen= newBCipherRandomGen(random_str);

  	//node_t **heads = calloc(m, sizeof(node_t *));
  	node_t **tails = calloc(m, sizeof(node_t *));

	batch_head->is_head=1;
	batch_head->prev=NULL;
	batch_head->next=NULL;
	batch_head->index=-1;
	batch_t *previous_batch=batch_head;

  	dllnode_t *list_prev;

  	int *len_arr=calloc(m, sizeof(int));

  	for(int i=0; i<m; i++){
		node_t *head = calloc(1,sizeof(node_t));
		head->is_head=true;
		head->next=NULL;
		batches[i]=head;
		tails[i]=head;
		len_arr[i]=0;

		//creating linked list containing all batches
		batch_t *batch_current=calloc(1,sizeof(batch_t));
		batch_current->index=i;
		batch_current->list=head;
		batch_current->prev=previous_batch;
		previous_batch->next=batch_current;
		batch_current->next=NULL;
		previous_batch=batch_current;

		//creating linked list holding roots of binary search trees
			struct bt_node *batch_root = NULL; 
		if(i==0){
			dllnode_t *first=create_head(batch_root, 0);
			list_prev=first;
			bt_roots[0]=first;
		
		}else{
			dllnode_t *element=insert_dllnode( list_prev, batch_root, i);
			list_prev=element;
			bt_roots[i]=element;


		}
  	}






  	for(int i=0; i<size; i++){
  		for(int j=0; j<d;j++){
  			node_t *this_node=calloc(1, sizeof(node_t));
  			unsigned long long rand= bcRandomInt(random_gen, (unsigned long long) m);
  			int r_a;
  			int r_b;

  			/*	bcrandom generates different values for both parties (even with same seed),
  			 	so they need to be broadcasted. 
  			*/
  			r_a=ocBroadcastInt((int)rand, 1);
  			r_b=ocBroadcastInt((int)rand, 2);
			int r= (r_a+r_b)% m;

			this_node->batch_no=r;
			this_node->val=i;
			this_node->next=NULL;
			this_node->is_head=false;
			node_t *current=tails[r];
			current->next=this_node;
			tails[r]= this_node;
			len_arr[r]=len_arr[r]+1;
			this_node->index_in_batch= len_arr[r]-1;


			//create one big binary search tree: O(log(n) pro insert)
		
			dllnode_t *element =bt_roots[r]; 
			struct bt_node *batch_root=element->s;

			batchelement_t *batchelem=calloc(1, sizeof(batchelement_t));
			batchelem->index_in_batch=len_arr[r]-1;
			batchelem->batch_no=r;
			batchelem->val=i;

			if(batch_root==NULL){
				element->s=insert( NULL, batchelem, i);

			}else{
				insert(batch_root,batchelem, i);

			}
			

  		}
  		
  	}



 

  	#ifdef DEBUG



	  	printf("\n");
	  	int N=0;
	  	for(int i=0; i<m; i++){
	  		printf("Bucket %d: %d \n", i , len_arr[i] );
	  		N=N+len_arr[i];
	  	}

	  	printf("N: \n", N);
	  	for(int i=0; i<m; i++){
	  		node_t *current=batches[i];
	  		while(current!=NULL){
	  			if(!current->is_head){
	  				printf(" ( %d , %d)", current->val, current->batch_no );
	  			}
	  			current=current->next;
	  		}
	  		printf(" | ");

	  	}
		printf("\n");


		dllnode_t *batch_root=bt_roots[0];
  		while(true){
	  		printf("batch %d :", batch_root->val );
			struct bt_node *this_batch=batch_root->s;

	  		inorder(this_batch);
	  		printf("\n");
	  		if(batch_root->next==NULL){
	  			break;
  		}
  		batch_root=batch_root->next;

  	}

		printf("successfully created graph\n");
  	#endif

	// Free allocated memory: kann ich fÃ¼r tails free machen?  	

}

void check_this_batch(dllnode_t **ptr_dllcurrent, node_t *current, pointinfo_t **matches, int index, batch_t *batch_current,  int *no_available_batches,  bool *found, int *i, int m){

		  	if(current->next!=NULL){

			  	current=current->next;
				int j=0;

			  	while(current!=NULL){

			  		int val=current->val;
			  		if(val==index){

			  			int count=m-*no_available_batches;
			  			printf(" count %d\n", count  );
			  			pointinfo_t *p=calloc(1, sizeof(pointinfo_t));
			  			p->val=index;
			  			p->batch=batch_current->index;
			  			p->index_in_batch=j;
			  			matches[count]=p;

				  		*no_available_batches=*no_available_batches-1;
						*found=true;
				  		*i=-1; 

			  			#ifdef DEBUG
			  				printf(" Match found! index:%d, batch:%d, index_in_batch:%d \n", index, p->batch, p->index_in_batch);
			  			#endif

				  		del_batch(batch_current);
				  		*ptr_dllcurrent=del_dllnode(*ptr_dllcurrent);
				  		break;
			  		}

			  		if(current->next !=NULL){
			  			//not last index in batch
			  			current=current->next;
			  			j=j+1;
			  		}else{
			  			//last index in batch reached
			  			break;
			  		}
			  	}
			}else{
				//skip empty batches
				*i=m;
			} 
}

bool combine_batches_indices(node_t **batches, mpfss_batch *mpfss, dllnode_t *head, batch_t *batch_head){
	int t=mpfss->t;

	/* Batches lists do not use header for infos, same goes for indices list*/
	int m=mpfss->m_rounded;
	dllnode_t *dllcurrent=head->next;
	int no_available_batches=m;
	
	pointinfo_t **matches=calloc(t, sizeof(pointinfo_t *));

	while(dllcurrent !=NULL){
		int index=dllcurrent->val;
		bool found=false;
		int i=0;
		batch_t *batch_current=batch_head;

		while( i<m){
			#ifdef DEBUG
				printf("index:%d i:%d\n", index, i );
				print_dll(head);
				print_batch_list(batch_head);
			#endif

			batch_current=batch_current->next;
		  	node_t *current=batch_current->list;

		 	check_this_batch(&dllcurrent, current, matches, index, batch_current,  &no_available_batches,  &found, &i, m);
			//printf("dllcurrent val %d wert des pointer %p add des pointers %p\n", dllcurrent->val, dllcurrent , &dllcurrent);


			//Batch is finished
			//printf("no_available_batches %d %p \n", no_available_batches, &no_available_batches);


			if((i+1)==no_available_batches && found==false){
				//if this was the last batch and we have not found anything: setup failed
			  	#ifdef DEBUG
	  				printf("No available batch found for index %d \n", index );
	  			#endif
				return false;
			}else if(no_available_batches==0){

			  	#ifdef DEBUG
		  			printf("successfully matched indices and batches\n");
		  		#endif
				return true;

			}else if(found==true){
				//finding batch for this index worked, therefore continue with next index
				break;
			}
			i=i+1;
		}			
	}
	printf("successfully matched indices and batches\n");

	return true;
}
