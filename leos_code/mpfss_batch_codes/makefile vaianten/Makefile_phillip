testName=mpfss_batch_codes

CC=../../obliv-c/bin/oblivcc
RUNTIME=../../obliv-c/_build/libobliv.a

ACKLIB_FFSL=../../absentminded-crypto-kit/src/oram_fssl/


CFLAGS=-g -Wall -D _Float128=double -DDEBUG  

ACKLIB=../../absentminded-crypto-kit/build/lib/liback.a 
#-lgomp flag is very important. Otherwise linking will fail. Does some kind of parallelization.
LGFLAGS=-fopenmp -lm


#LIB := 
SOURCES := $(shell find . -type f -name '*.c')
SOURCES += $(shell find ../mpfss/ -type f -name '*.c')
SOURCES += $(shell find ../util/ -type f -name '*.c')

SOURCES2 := $(shell find . -type f -name '*.oc')
SOURCES2 += $(shell find ../mpfss/ -type f -name '*.oc')
SOURCES2 += $(shell find ../util/ -type f -name '*.oc')

OBJECTS := $(patsubst %.c, %.o, $(SOURCES))
OBJECTS += $(patsubst %.oc, %.oo, $(SOURCES2))

CFLAGS += -I/home/turing/semesterprojekt_code/leos_code/util/ -I/home/turing/semesterprojekt_code/leos_code/mpfss_batch_codes/ -I/home/turing/semesterprojekt_code/leos_code/mpfss/ -I$(ACKLIB_FFSL)

$(LIB): $(OBJECTS)
	ar rcs $@ $^

LIB += $(ACKLIB)

a.out: $(OBJECTS) $(LIB)
	$(CC) -o $@ $^ $(LDFLAGS)



# extract dependencies
#%.d: %.c $(LIBRARIES)
#	@set -e; rm -f $@; \
#	$(CC) -MM $(CFLAGS) -MT "$*.o $@" $< > $@;

#-include $(SOURCES:.c=.d)

#%.od: %.oc $(LIBRARIES)
#	@set -e; rm -f $@; \
#	$(CC) -MM $(CFLAGS) -MT "$*.oo $@" $< > $@;

#-include $(SOURCES:.oc=.od)	

#.PHONY: clean
#clean:
#	$(RM) $(OBJECTS) $(OBJECTS:.o=.d) $(LIB)

